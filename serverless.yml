# Name of service
service: stock-journal-api
# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-west-1
  deploymentBucket: # used to specify specific bucket for S3
    name: stock-journal-upload 
  cloudFront:


  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: stock-journal
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    tdClientId: ${env:TD_CLIENT_ID}
    tdRedirectUri: ${env:TD_REDIRECT_URI}
    accessTokenHash: ${env:ACCESS_TOKEN_SECRET}
    refreshTokenHash: ${env:REFRESH_TOKEN_SECRET}
    userTokenTable: user-token

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-west-1:*:*"
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: "arn:aws:execute-api:us-west-1:*:01v3itt60l/*"

# Create our resources with separate CloudFormation templates
# Returns CORS headers for 4xx and 5xx errors
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /stock-journal
  # - method: POST request
  create:
    handler: create.main
    events:
      - http:
          path: stocks
          method: post
          authorizer: aws_iam
          cors: true
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /stocks/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: stocks/{id}
          method: get
          authorizer: aws_iam
          cors: true
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /stocks
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: stocks
          method: get
          authorizer: aws_iam
          cors: true
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /stocks/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: stocks/{id}
          method: put
          authorizer: aws_iam
          cors: true
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /stocks/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: stocks/{id}
          method: delete
          authorizer: aws_iam
          cors: true
  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          authorizer: aws_iam
          cors: true
  # 
  mergeCookies:
    handler: mergeCookies.main
    events:
      - http:
          path: mergeCookies
          method: post
          authorizer: aws_iam
          cors: true
  ##### TD API end points
  getCodeTD:
    handler: getCodeTD.main
    events:
      - http:
          path: getCodeTD
          method: post
          authorizer: aws_iam
          cors: true
  getAcctTD:
    handler: getAcctTD.main
    events:
      - http:
          path: getAcctTD
          method: put
          authorizer: aws_iam
          cors: true
  transactionsTD:
    handler: transactionsTD.main
    timeout: 120 # Timeout 2 minutes for getting one year worth of past stocks
    events:
      - http:
          path: transactionsTD
          method: put
          authorizer: aws_iam
          cors: true